package com.example.financeapp

import android.annotation.SuppressLint
import android.content.res.Resources
import android.database.Cursor
import android.os.Bundle
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.financeapp.adapters.TransactionAdapter
import com.example.financeapp.helpers.DatabaseHelper
import com.example.financeapp.models.Transaction
import com.google.android.material.button.MaterialButton
import java.text.NumberFormat
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.Locale

class MainActivity : AppCompatActivity(), TransactionAdapter.OnDeleteClickListener {

    private lateinit var editAmount: EditText
    private lateinit var editNote: EditText
    private lateinit var btnSave: MaterialButton
    private lateinit var textTotal: TextView
    private lateinit var recyclerView: RecyclerView

    private lateinit var transactionList: ArrayList<Transaction>
    private lateinit var adapter: TransactionAdapter
    private lateinit var dbHelper: DatabaseHelper

    private val currencyFormatter: NumberFormat = NumberFormat.getCurrencyInstance(Locale("in", "ID"))
    private var totalExpense: Double = 0.0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        dbHelper = DatabaseHelper(this)

        // Initialize views
        editAmount = findViewById(R.id.editAmount)
        editNote = findViewById(R.id.editNote)
        btnSave = findViewById(R.id.btnSave)
        textTotal = findViewById(R.id.textTotal)
        recyclerView = findViewById(R.id.recyclerViewTransactions)
        recyclerView.layoutManager = LinearLayoutManager(this)

        // Initialize list and adapter
        transactionList = ArrayList()
        adapter = TransactionAdapter(
            transactionList,
            this, // Method reference
            DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss") // Keep or adjust as needed
        )
        recyclerView.adapter = adapter

        // Save button click listener
        btnSave.setOnClickListener { addTransaction() }

        // Load existing transactions
        loadTransactions()
    }

    @SuppressLint("NotifyDataSetChanged") // Consider more specific notify calls if possible
    private fun loadTransactions() {
        val cursor: Cursor? = dbHelper.getAllTransactions()
        cursor?.use { // use extension function ensures the cursor is closed
            transactionList.clear() // Clear list before loading
            totalExpense = 0.0 // Reset total expense
            while (it.moveToNext()) {
                val id = it.getLong(it.getColumnIndexOrThrow(DatabaseHelper.COLUMN_ID))
                val amount = it.getDouble(it.getColumnIndexOrThrow(DatabaseHelper.COLUMN_AMOUNT))
                val note = it.getString(it.getColumnIndexOrThrow(DatabaseHelper.COLUMN_NOTE))
                val timestamp = it.getString(it.getColumnIndexOrThrow(DatabaseHelper.COLUMN_TIMESTAMP))

                val transaction = Transaction(id, amount, note, timestamp)
                transactionList.add(transaction)
                totalExpense += amount
            }
            adapter.notifyDataSetChanged() // Notify adapter after loading all data
            updateTotalText() // Update the total expense text view
        }
    }

    private fun addTransaction() {
        val amountStr = editAmount.text.toString().trim()
        val note = editNote.text.toString().trim()

        if (amountStr.isEmpty()) {
            editAmount.error = "Masukkan jumlah pengeluaran"
            editAmount.requestFocus()
            return
        }

        val amount: Double = try {
            amountStr.toDouble()
        } catch (e: NumberFormatException) {
            editAmount.error = "Format jumlah tidak valid"
            editAmount.requestFocus()
            println(e.message)
            return
        }

        if (amount <= 0) {
            editAmount.error = "Jumlah harus lebih dari 0"
            editAmount.requestFocus()
            return
        }

        val newId = dbHelper.addNewRecord(amount, note)
        if (newId == -1L) { // In Kotlin, compare Long with -1L
            Toast.makeText(this, "Gagal menyimpan transaksi", Toast.LENGTH_SHORT).show()
            return
        }

        // The timestamp from the database is generated by DEFAULT CURRENT_TIMESTAMP
        // We need to fetch it or rely on the one from DB if TransactionAdapter uses it directly.
        // For consistency, it might be better to fetch the record from DB again or
        // ensure the format used here matches the one expected by TransactionAdapter / display logic.
        // The original Java code created a new LocalDateTime.now() for the Transaction object,
        // which might differ from the database's CURRENT_TIMESTAMP.
        // Let's assume we want to display the time of insertion from the app side for now.
        val timestamp = LocalDateTime.now()
            .format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss", Locale("id", "ID")))

        val newTransaction = Transaction(newId, amount, note, timestamp)
        // newTransaction.id is already set by the constructor in the data class

        transactionList.add(newTransaction)
        totalExpense += amount
        adapter.notifyItemInserted(transactionList.size - 1)
        updateTotalText()

        editAmount.text.clear()
        editNote.text.clear()
        editAmount.requestFocus()

        val formattedAmount = currencyFormatter.format(amount)
        Toast.makeText(this, "Transaksi berhasil: $formattedAmount", Toast.LENGTH_SHORT).show()
    }

    private fun removeTransaction(transactionId: Long) {
        val positionToRemove = transactionList.indexOfFirst { it.id == transactionId }

        if (positionToRemove == -1) {
            return // Transaction not found
        }

        val amountToRemove = transactionList[positionToRemove].amount

        if (dbHelper.deleteRecord(transactionId)) {
            transactionList.removeAt(positionToRemove)
            totalExpense -= amountToRemove
            adapter.notifyItemRemoved(positionToRemove)
            // Consider also notifying range changed if positions shift:
            // adapter.notifyItemRangeChanged(positionToRemove, transactionList.size)
            updateTotalText()
        } else {
            Toast.makeText(this, "Gagal menghapus transaksi", Toast.LENGTH_SHORT).show()
        }
    }

    @SuppressLint("StringFormatMatches") // Suppress if R.string.total_update has correct format specifiers
    private fun updateTotalText() {
        val res: Resources = resources
        val formattedTotal = currencyFormatter.format(totalExpense)
        // Assuming R.string.total_update is "Total Pengeluaran: %s" or similar
        textTotal.text = getString(R.string.total_update, formattedTotal)
    }

    override fun onDeleteClick(transactionId: Long) {
        removeTransaction(transactionId)
    }
}
